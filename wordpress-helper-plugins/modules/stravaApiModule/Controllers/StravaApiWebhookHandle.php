<?php
/**
 * Created by PhpStorm.
 * User: tom
 * Date: 3/9/21
 * Time: 1:25 PM
 */

namespace Elhelper\modules\stravaApiModule\Controllers;

use Elhelper\common\Singleton;
use Elhelper\modules\productStravaModule\model\ProductUserModel;
use Elhelper\modules\userStravaModule\model\UserStravaAthleteModel;

class StravaApiWebhookHandle extends Singleton {
	public function __init() {
		parent::__init(); // TODO: Change the autogenerated stub
	}

	/*  String update
	 * {\"aspect_type\":\"update\",\"event_time\":1624915141,\"object_id\":5544776569,\"object_type\":\"activity\",\"owner_id\":72408224,\"subscription_id\":194550,\"updates\":{\"title\":\"Run13e\"}}
	 * */

	/*
	 * String created
	 * string(206) "json"
	 * {\"aspect_type\":\"create\",
	 * \"event_time\":1624913616,
	 * \"object_id\":5544776569,
	 * \"object_type\":\"activity\",
	 * \"owner_id\":72408224,
	 * \"subscription_id\":194550,
	 * \"updates\":{}}"||
	 * time: 28-06-2021 20:06:38"
	 * */


	public function verifyWebhookStrava() {
		$json    = file_get_contents( "php://input" );
		$headers = getallheaders();
		write_log( 'header' . json_encode( $headers ) );
		write_log( 'json' . json_encode( $json ) );
//		$json = str_replace( "\\", '', $json );
//		write_log( $json );
		$json = phpJson_decode( $json );
//		write_log( $json );
		write_log( $json['aspect_type'] );

		//aspect_type ['update','create');
//		if ( $json['aspect_type'] == 'update' && $json['object_type'] == 'activity' ) {
		if ( $json['aspect_type'] == 'update' && $json['object_type'] == 'activity' ) {
			$user_objs = UserStravaAthleteModel::getUserIdByAthlete( $json['owner_id'] );
			if ( ! empty( $user_objs ) ) {
				$userAthlete = new UserStravaAthleteModel( $user_objs->ID );
				$products    = inspire_get_list_purchased_product_by_user_object( $user_objs );
				$activity    = new \Elhelper\modules\activityModule\model\ActivityStravaModel();
				$res         = $activity->getActivityInfo( $user_objs->ID, $json['object_id'] );
				$userAthlete->addAthleteTotalDistance( $res->distance );
				if ( ! empty( $products ) ) {
					foreach ( $products as $product_id ) {
						if ( ! empty( $res ) ) {
							$userAthlete->addDistanceOfUserOfProduct( $product_id, $res->distance );
//							ProductUserModel::addDistanceToProduct( $product_id, $res->distance );
							write_log( 'added distance to productid' . __FILE__ . __LINE__ );
						} else {
							write_log( 'Empty activity distance' . __FILE__ . __LINE__ );
						}
					}
				}
			}

			return true;
		} else {
			write_log( 'not activity created' . __FILE__ . __LINE__ );

			return false;
		}

	}


	/*public function verifyWebhookStrava() {
		$json    = file_get_contents( "php://input" );
		$headers = getallheaders();
		$data    = json_decode( $json, false, 512, JSON_BIGINT_AS_STRING );
		if ( 0 < strlen( $json ) && isset( $headers["X-Zevent-Signature"] ) ) :
			if ( $data ) :
				// Calculate the MAC value from received data
				$mac_1 = "mac=" . hash( "sha256", $data->app_id . $json . $data->timestamp . OA_SECRET_KEY );
				$mac_2 = $headers["X-Zevent-Signature"];

				if ( 0 === strcmp( $mac_1, $mac_2 ) ) :
					return true;
				endif;
			endif;
		endif;

		return false;
	}*/

	public function verifyAccessTokenStrava() {

		return true;
	}

}