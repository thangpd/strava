<?php
/**
 * Created by PhpStorm.
 * User: tom
 * Date: 6/24/21
 * Time: 11:49 PM
 */

namespace Elhelper\modules\userStravaModule\controller;


use Elhelper\common\Singleton;
use Elhelper\inc\HeplerStrava;
use Elhelper\modules\userStravaModule\model\UserStravaBearerModel;

class UserStravaController extends Singleton {
	//Override $_instance. If not. It'll have the last object instance is initialized before this class.
	protected static $_instance;

	public function __init() {
		parent::__init(); // TODO: Change the autogenerated stub
		add_action( 'wp_ajax_deauthorizeStrava', [ $this, 'deauthorizeStrava' ] );
		add_action( 'wp_ajax_nopriv_deauthorizeStrava', [ $this, 'deauthorizeStrava' ] );

	}


	public function deauthorizeStrava() {
		$res = [ 'code' => 200, 'message' => '' ];
		if ( is_ajax() ) {
			$user_id = $_POST['user_id'];
		}
		if ( ! empty( $user_id ) ) {
			$userBearer   = new UserStravaBearerModel( $user_id );
			$access_token = $userBearer->getAccessToken();

			$post = array( 'access_token' => $access_token );

			$callStravaAPI = HeplerStrava::callStravaAPI( 'https://www.strava.com/oauth/deauthorize', $post, 'GET' );
			$res['data']   = $callStravaAPI;
			if ( ! isset( $callStravaAPI->errors ) ) {
				$userBearer->deleteBearerUser();
				wp_die( json_encode( $res ) );
			} else {
				$res['code'] = 400;
				wp_die( json_encode( $res ) );
			}
		}

	}

	public function getInfoAthlete( $user_id ) {
		$userBearer = new UserStravaBearerModel( $user_id );

		return HeplerStrava::callStravaAPI( 'https://www.strava.com/api/v3/athlete', $userBearer->getAccessToken() );
	}

	public function getListActivities( $user_id ) {
		$userBearer = new UserStravaBearerModel( $user_id );
//		echo '<pre>';
//		print_r( $userBearer->getAccessToken() );
//		echo '</pre>';
		$post = array(
//			'before'   => 0,
//			'after'    => 0,
			'page'     => 1,
			'per_page' => 5,
		);

		$callStravaAPI = HeplerStrava::callStravaAPI( 'https://www.strava.com/api/v3/athlete/activities', $userBearer->getAccessToken(), $post, 'GET' );

		if ( ! isset( $callStravaAPI->errors ) ) {
			return $callStravaAPI;
		} else {
			return false;
		}
	}

	function templateInclude( $template ) {

		return $template;
	}


}